const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function scanDirectory(dir, depth = 0, maxDepth = 2) {
  if (depth > maxDepth) return;
  
  try {
    const items = fs.readdirSync(dir);
    
    items.forEach(item => {
      const itemPath = path.join(dir, item);
      const stats = fs.statSync(itemPath);
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules –∏ .git –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      if (item === 'node_modules' || item === '.git') {
        console.log('  '.repeat(depth) + `üìÅ ${item} (skipped)`);
        return;
      }
      
      if (stats.isDirectory()) {
        console.log('  '.repeat(depth) + `üìÅ ${item}/`);
        scanDirectory(itemPath, depth + 1, maxDepth);
      } else {
        console.log('  '.repeat(depth) + `üìÑ ${item}`);
      }
    });
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ ${dir}: ${err.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞
function detectProjectType() {
  const currentDir = process.cwd();
  console.log(`–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${currentDir}\n`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ package.json (Node.js/JavaScript/TypeScript –ø—Ä–æ–µ–∫—Ç)
  if (fs.existsSync(path.join(currentDir, 'package.json'))) {
    const packageJson = require(path.join(currentDir, 'package.json'));
    console.log('–ù–∞–π–¥–µ–Ω package.json. –≠—Ç–æ JavaScript/TypeScript –ø—Ä–æ–µ–∫—Ç.');
    
    console.log('\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –≤ package.json:');
    if (packageJson.scripts) {
      Object.keys(packageJson.scripts).forEach(script => {
        console.log(`- ${script}: ${packageJson.scripts[script]}`);
      });
      
      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞
      console.log('\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:');
      
      if (packageJson.scripts.start) {
        console.log('npm start');
      }
      if (packageJson.scripts.dev) {
        console.log('npm run dev');
      }
      if (packageJson.scripts.serve) {
        console.log('npm run serve');
      }
      if (packageJson.scripts.develop) {
        console.log('npm run develop');
      }
    } else {
      console.log('–í package.json –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å–∫—Ä–∏–ø—Ç—ã.');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
    if (packageJson.dependencies) {
      if (packageJson.dependencies.react) {
        console.log('\n–≠—Ç–æ React –ø—Ä–æ–µ–∫—Ç.');
      }
      if (packageJson.dependencies.next) {
        console.log('\n–≠—Ç–æ Next.js –ø—Ä–æ–µ–∫—Ç.');
      }
      if (packageJson.dependencies.vue) {
        console.log('\n–≠—Ç–æ Vue.js –ø—Ä–æ–µ–∫—Ç.');
      }
      if (packageJson.dependencies.angular || packageJson.dependencies['@angular/core']) {
        console.log('\n–≠—Ç–æ Angular –ø—Ä–æ–µ–∫—Ç.');
      }
      if (packageJson.dependencies.express) {
        console.log('\n–≠—Ç–æ Express.js –ø—Ä–æ–µ–∫—Ç (–±—ç–∫–µ–Ω–¥).');
      }
    }
    
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pubspec.yaml (Flutter/Dart –ø—Ä–æ–µ–∫—Ç)
  if (fs.existsSync(path.join(currentDir, 'pubspec.yaml'))) {
    console.log('–ù–∞–π–¥–µ–Ω pubspec.yaml. –≠—Ç–æ Flutter/Dart –ø—Ä–æ–µ–∫—Ç.');
    console.log('\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:');
    console.log('flutter run');
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pom.xml (Java/Maven –ø—Ä–æ–µ–∫—Ç)
  if (fs.existsSync(path.join(currentDir, 'pom.xml'))) {
    console.log('–ù–∞–π–¥–µ–Ω pom.xml. –≠—Ç–æ Java/Maven –ø—Ä–æ–µ–∫—Ç.');
    console.log('\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:');
    console.log('mvn spring-boot:run (–¥–ª—è Spring Boot)');
    console.log('–∏–ª–∏');
    console.log('mvn exec:java');
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ build.gradle (Java/Gradle –ø—Ä–æ–µ–∫—Ç)
  if (fs.existsSync(path.join(currentDir, 'build.gradle'))) {
    console.log('–ù–∞–π–¥–µ–Ω build.gradle. –≠—Ç–æ Java/Gradle –ø—Ä–æ–µ–∫—Ç.');
    console.log('\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:');
    console.log('gradle bootRun (–¥–ª—è Spring Boot)');
    console.log('–∏–ª–∏');
    console.log('gradle run');
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ requirements.txt –∏–ª–∏ setup.py (Python –ø—Ä–æ–µ–∫—Ç)
  if (fs.existsSync(path.join(currentDir, 'requirements.txt')) || 
      fs.existsSync(path.join(currentDir, 'setup.py'))) {
    console.log('–ù–∞–π–¥–µ–Ω requirements.txt –∏–ª–∏ setup.py. –≠—Ç–æ Python –ø—Ä–æ–µ–∫—Ç.');
    
    // –ò—â–µ–º —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .py –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const pythonFiles = fs.readdirSync(currentDir)
      .filter(file => file.endsWith('.py'));
    
    console.log('\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ Python —Ñ–∞–π–ª—ã:');
    pythonFiles.forEach(file => console.log(`- ${file}`));
    
    console.log('\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:');
    if (pythonFiles.includes('app.py')) {
      console.log('python app.py');
    } else if (pythonFiles.includes('main.py')) {
      console.log('python main.py');
    } else if (pythonFiles.includes('manage.py')) {
      console.log('python manage.py runserver (–¥–ª—è Django)');
    } else if (pythonFiles.length > 0) {
      console.log(`python ${pythonFiles[0]}`);
    }
    return;
  }
  
  console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ñ–∞–π–ª–∞–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
  console.log('–í–æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø:');
  scanDirectory(currentDir);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
detectProjectType();